with game_stats2 AS
(
SELECT 
date as day,
#source_id,
split(g.category_ids, ',')[SAFE_ORDINAL(1)] AS category,
g.platform,  
sum(impressions) as impressions_total,
sum(distinct_uid_impression) as distinct_uid_impressions,
sum(distinct_uid_request) as distinct_uid_request,
sum(revenue) as revenue,
sum(requests) as requests
FROM unique_users.day_country_source d
  join gameads.game_profiles g on d.source_id=g.game_id
WHERE 
  [date=daterange] and [country=Country] and [cast(source_id as string)=sourceGameId]
  #date='2019-12-01'
  and g.category_ids is not null
AND distinct_uid_impression > 0
AND distinct_uid_request > 0
group by 1,2,3
ORDER BY 4 DESC 
)

,catmap as(
  
  select  category_name,gs.* from game_stats2 gs
  left join lookups.category_mapping c on c.platform = gs.platform and c.category_id = gs.category
  where category is not null
  )

SELECT
#day,
category_name,
#game_name,
platform,

sum(impressions_total)*1.0 / sum(distinct_uid_impressions) as ads_watched_per_watchr,
#sum(revenue) * 1.0/ sum(distinct_uid_impressions) as arpdau_per_watchr,
#sum(impressions_total)*1.0 / sum(distinct_uid_request) as ads_watched_per_DAU,
#sum(revenue) * 1.0/ sum(distinct_uid_request) as arpdau,
sum(distinct_uid_impressions)*1.0 / sum(distinct_uid_request) as share_of_watchrs_over_DAU,
#sum(requests)*1.0 / sum(distinct_uid_request) as ad_requests_per_DAU,
avg(distinct_uid_request) AS avg_DAU,
avg(distinct_uid_impressions) AS avg_DAU_watching_ads,
avg(distinct_uid_request - distinct_uid_impressions) as avg_dau_not_watching_ads,
sum(revenue) as revenue

FROM catmap gs
WHERE 
category_name is not null and
#[platform=Platform]
#and [publisher_account_manager_contact=AM_BD_contact] 
#and [cast(source_id as string)=SourceGameId] And
revenue>0
GROUP BY 1,2
HAVING avg(distinct_uid_impressions) > 9
ORDER BY 1,2,6 DESC
limit 10000
