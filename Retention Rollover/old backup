WITH A
AS
(
  #SELECT gamerid AS UserId,  DATE_DIFF(date '2019-05-25', date(eventTimestamp), day) as time_period, eventTimestamp from rawevents.ads_events_operativeecpm
SELECT gamer_id AS UserId,  date as time_period, date as eventTimestamp from rawevents.users_daily_aggregates_v2
  #where [SourceGameId=GameID] and [DeveloperId=Developer_id] and [TargetGameID=TargetGameid] and eventTimestamp>'2019-05-25' 
 #where SourceGameId= '122655'  and date>='2019-05-25' and date<='2019-06-09'
   where Source_Id in (1786931,1786932) and [DeveloperId=Developer_id]  and date>='[RangeStart]' and date<='[RangeEnd]'
),

LAG_LEAD AS 
(
SELECT DISTINCT userid, extract(day from eventTimestamp) AS day, eventTimestamp,time_period
,
lag(time_period,1) over (partition by USERID order by USERID, time_period) AS LAG,

lead(time_period,1) over (partition by USERID ORDER by USERID, time_period) AS LEAD

#FROM a  where UserId in (select UserId from a where time_period=0)
FROM a  where UserId in (select UserId from a where eventTimestamp='[RangeStart]')

),

lag_lead_with_diffs as (

  select DISTINCT USERID, time_period, lag, lead, 

    DATE_DIFF(time_period,lag,day) lag_size, 

    DATE_DIFF(lead,time_period,day) lead_size, eventTimestamp

  from lag_lead
)

,calculated AS 
         (
 SELECT USERID, time_period, eventTimestamp, 
                case when lag is null then 'Day1 Users'
                     when lag_size = 1 then 'ACTIVE'
                     when lag_size > 1 then 'RETURN'
                end as this_day_value,
                case when (lead_size > 1 OR lead_size IS NULL) then 'Not Returned'
                     else NULL
                end as next_day_churn,
                     COUNT(distinct USERID) AS CountOfUsers FROM lag_lead_with_diffs   group by USERID, TIME_PERIOD, eventTimestamp,  
                case when lag is null then 'Day1 Users'
                     when lag_size = 1 then 'ACTIVE'
                     when lag_size > 1 then 'RETURN'
                END
                , 
                     case when (lead_size > 1 OR lead_size IS NULL) then 'Not Returned'
                     else NULL
                END
),

finaldata as
(
select time_period, this_day_value, sum(CountOfUsers)  as CountOfUsers 
  from calculated WHERE  THIS_day_VALUE IS NOT NULL AND TIME_PERIOD IS NOT NULL
 group by 1,2
union all
select DATE_ADD(time_period,interval 1 day) as time_period, 'Not Returned', sum(CountOfUsers) 
  from calculated where next_day_churn is not null
  group by 1,2
)

SELECT * from finaldata where time_period<(SELECT max(time_period) from finaldata)
